<UserControl x:Class="Ame.App.Wpf.UI.Docks.LayerListDock.LayerListNode"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:Ame.App.Wpf.UI.Docks.LayerListDock"
             xmlns:actions="clr-namespace:Ame.App.Wpf.UILogic.Actions"
             xmlns:conv="clr-namespace:Ame.App.Wpf.UILogic.Converters"
             mc:Ignorable="d"
             AllowDrop="True">

    <UserControl.Resources>
        <ResourceDictionary>
            <conv:BooleanToVisiblityConverter x:Key="BoolToVisConverter"
                                              Collapse="True" />
            <conv:BooleanToVisiblityConverter x:Key="BoolToVisConverterInverse"
                                              IsInversed="True"
                                              Collapse="True" />
            <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
            <conv:MouseEventToPointConverter x:Key="MouseEventToPointConverter" />
        </ResourceDictionary>
    </UserControl.Resources>

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
            <actions:EventToCommand Command="{Binding MouseLeftButtonDownCommand, Mode=OneWay}"
                                    PassEventArgsToCommand="True" />
        </i:EventTrigger>
        <i:EventTrigger EventName="PreviewMouseMove">
            <actions:EventToCommand Command="{Binding MouseMoveCommand, Mode=OneWay}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Drop">
            <actions:EventToCommand Command="{Binding DropCommand, Mode=OneWay}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <!-- TODO see if the context menu can be added in this file -->
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <Rectangle x:Name="selectionHitBox"
                   Fill="Transparent"
                   Stretch="Fill"
                   Grid.ColumnSpan="3">
        </Rectangle>

        <StackPanel Orientation="Horizontal"
                    Grid.Column="0">
            <ToggleButton x:Name="showLayerToggleButton"
                          Style="{DynamicResource PrimaryMidIconToggleButtonStyle}"
                          IsChecked="{Binding Layer.IsVisible.Value}"
                          ToolTip="Show: Toggles the layer display">
                <Grid>
                    <ContentControl Content="{StaticResource ic_VisibilityOff}"
                                    Width="{StaticResource MidIconSize}"
                                    Height="{StaticResource MidIconSize}"
                                    Visibility="{Binding IsChecked, ElementName=showLayerToggleButton, Converter={StaticResource BoolToVisConverterInverse}}" />
                    <ContentControl Content="{StaticResource ic_VisibilityOn}"
                                    Width="{StaticResource MidIconSize}"
                                    Height="{StaticResource MidIconSize}"
                                    Visibility="{Binding IsChecked, ElementName=showLayerToggleButton, Converter={StaticResource BoolToVisConverter}}" />
                </Grid>
            </ToggleButton>



            <ToggleButton x:Name="lockLayerToggleButton"
                          Style="{DynamicResource PrimaryMidIconToggleButtonStyle}"
                          IsChecked="{Binding Layer.IsImmutable.Value}"
                          ToolTip="Lock: Prevents the layer from being moved and edited">
                <Grid>
                    <ContentControl Content="{StaticResource ic_LockOpen}"
                                    Width="{StaticResource MidIconSize}"
                                    Height="{StaticResource MidIconSize}"
                                    Visibility="{Binding IsChecked, ElementName=lockLayerToggleButton, Converter={StaticResource BoolToVisConverterInverse}}" />
                    <ContentControl Content="{StaticResource ic_Lock}"
                                    Width="{StaticResource MidIconSize}"
                                    Height="{StaticResource MidIconSize}"
                                    Visibility="{Binding IsChecked, ElementName=lockLayerToggleButton, Converter={StaticResource BoolToVisConverter}}" />
                </Grid>
            </ToggleButton>

            <Image x:Name="tilesetImage"
                   Source="{Binding LayerPreview, Mode=OneWay}"
                   VerticalAlignment="Center"
                   HorizontalAlignment="Center"
                   Width="32"
                   Height="32"
                   Stretch="UniformToFill">
            </Image>
        </StackPanel>

        <TextBox x:Name="layerNameLabel"
                 Text="{Binding Layer.Name.Value}"
                 HorizontalAlignment="Left"
                 VerticalAlignment="Center"
                 Grid.Column="1"
                 IsReadOnly="{Binding IsEditingName.Value, Converter={StaticResource InverseBoolConverter}}"
                 BorderThickness="0"
                 Background="Transparent">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick">
                    <actions:EventToCommand Command="{Binding EditTextboxCommand, Mode=OneWay}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="LostFocus">
                    <actions:EventToCommand Command="{Binding StopEditingTextboxCommand, Mode=OneWay}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </TextBox>

        <Label x:Name="layerPositionLabel"
               Content="{Binding Layer.Position.Value, Mode=OneWay}"
               HorizontalAlignment="Right"
               VerticalAlignment="Center"
               Grid.Column="2">
        </Label>
    </Grid>
</UserControl>
